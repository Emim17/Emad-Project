My first day as a data analyst has started.
list of all the payments of customers 322, 346 and 354 where the amount is either less than 2 or greater than 10.
sort by customer id and amount (high to low)
Answer:

SELECT * FROM payment
WHERE (customer_id = 322 OR customer_id = 346 OR customer_id = 354)
AND (amount < 2 OR amount > 10)
ORDER BY customer_id, amount DESC

How many payments have been made on January 26-27 2020 with amount of 1.99-3.99?

ANS:
SELECT COUNT (*) FROM payment
WHERE (payment_date BETWEEN '2020-01-26' AND '2020-01-28 00:00')
AND (amount BETWEEN 1.99 AND 3.99)

There have been 6 complaints from customers about their payments. their customer Id's are (12,25,67,93,123,234).
The concerned payments are all the payments of these customers with amount of 4.99, 7.99 and 9.99 in January 2020.
ANS:

SELECT * FROM payment
WHERE (customer_id IN (12,25,67,93,124,234))
AND (payment_date BETWEEN '2020-01-01' AND '2020-01-31 23:59')
AND (amount IN (4.99, 7.99, 9.99))

In 2020, April 28-30 were the days with the highest revenue.
Find out what is the highest average income by customer and date in those dates.
Consider only the days/customers with more than one payment.

ANS:
SELECT customer_id, DATE(payment_date) AS date,
ROUND(AVG(amount),2) AS avg_sales
FROM payment
WHERE payment_date BETWEEN '2020-04-28' AND '2020-04-30 23:59'
GROUP BY customer_id, date
HAVING COUNT(*) >1
ORDER BY avg_sales DESC;


Flights data:
Q:
How many tickets were sold in the following category?
Low_price ticket (less than 20,000)
Medium_price ticket (20,000 to 150,000)
High_price ticket (more than 150,000).

How many high price tickets were sold?

A:

SELECT COUNT(*),
CASE
WHEN total_amount<20000 THEN 'Low price ticket'
WHEN total_amount<150000 THEN 'Mid price ticket'
ELSE 'High price ticket'
END as ticket_price
FROM bookings
GROUP BY ticket_price

Q:
How many flights are scheduled in the following seasons?
Winter (Dec-Feb)
Spring (Mar-May)
Summer (June-Aug)
Fall (Sep-Nov)

A:
SELECT COUNT(*) AS total_flights,
CASE
WHEN EXTRACT (MONTH from scheduled_departure) IN (12,01,02) THEN 'Winter'
WHEN EXTRACT (MONTH from scheduled_departure) IN (03,04,05) THEN 'Spring'
WHEN EXTRACT (MONTH from scheduled_departure) IN (06,07,08) THEN 'Summer'
ELSE 'Fall'
END AS Season
FROM flights
GROUP BY Season

Q:
An airline company wants to know which category sells most tickets:
- Business
- Economy
- Comfort

A:
SELECT fare_conditions AS class, COUNT(*) AS tickets_sold FROM flights AS f
INNER JOIN seats AS s
ON s.aircraft_code = f.aircraft_code
INNER JOIN boarding_passes AS bp
ON bp.flight_id = f.flight_id
AND bp.seat_no = s.seat_no
GROUP BY class
ORDER BY tickets_sold DESC

Note*: 
boarding_passes and flights: This join connects each boarding pass to its corresponding flight using the flight_id.
It ensures that each boarding pass is matched with the correct flight details.
flights and seats: This join links flights to seats based on the aircraft_code
and matches the seat_no from the boarding_passes with the seat_no in the seats table. This is crucial as it ensures
that the seat number is associated with the correct aircraft, thus accurately aligning the seat number with its fare class.

Q:
return all customers names and emails that have spent a total of more than 30$

A:
SELECT first_name, last_name, email FROM customer
WHERE customer_id IN (SELECT customer_id FROM payment
GROUP BY customer_id
HAVING SUM(amount) >30)

Q: return all customers names that are from California and spent a total of more than 100$

A:
SELECT first_name, last_name FROM customer
WHERE address_id IN (SELECT address_id FROM address
WHERE district = 'California') AND
customer_id IN (SELECT customer_id FROM payment
GROUP BY customer_id
HAVING SUM(amount) >100)
