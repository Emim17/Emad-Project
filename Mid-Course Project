1. Task: Create a list of all the different (distinct) replacement costs of the films.
Question: What's the lowest replacement cost?

A:
SELECT DISTINCT(replacement_cost) FROM film
ORDER BY replacement_cost

2. Task: Write a query that gives an overview of how many films have replacement costs in the following cost ranges
- low: 9.99 - 19.99
- medium: 20.00 - 24.99
- high: 25.00 - 29.99
Question: How many films have a replacement cost in the "low" group?

A:
SELECT 
CASE
WHEN replacement_cost >=9.99 AND replacement_cost <=19.99 THEN 'low'
WHEN replacement_cost BETWEEN 20 AND 24.99 'medium'
WHEN replacement_cost  >24.99 THEN 'high'
END AS rp_category,
COUNT(*) AS no_of_films
FROM film
GROUP BY rp_category
ORDER BY no_of_films

3. Task: Create a list of the film titles including their title, length, and category name ordered descendingly by length.
Filter the results to only the movies in the category 'Drama' or 'Sports'.
Question: In which category is the longest film and how long is it?

A:
SELECT title, length, name AS category
FROM film f
LEFT JOIN film_category fc ON
f.film_id=fc.film_id
LEFT JOIN category c ON
fc.category_id = c.category_id
WHERE name IN('Drama', 'Sports')
ORDER BY length DESC

4. Task: Create an overview of how many movies (titles) there are in each category (name).
Question: Which category (name) is the most common among the films?

A:
SELECT name AS category, COUNT(*) FROM film f
INNER JOIN film_category fc ON
f.film_id=fc.film_id
INNER JOIN category c ON
fc.category_id = c.category_id
GROUP BY category
ORDER BY COUNT(*) DESC

5. Task: Create an overview of the actors' first and last names and in how many movies they appear in.
Question: Which actor is part of most movies??

A:
SELECT first_name, last_name, COUNT(*)
FROM film_actor fa
INNER JOIN actor a ON
fa.actor_id=a.actor_id
GROUP BY first_name, last_name
ORDER BY COUNT(*) DESC

6. Task: Create an overview of the addresses that are not associated to any customer.
Question: How many addresses are that?

A:
SELECT * FROM address a
LEFT JOIN customer c ON
a.address_id = c.address_id
WHERE customer_id IS null

7. Task: Create the overview of the sales to determine from which city 
(we are interested in the city in which the customer lives, not where the store is) most sales occur.
Question: What city is that and how much is the amount?

A:
SELECT city, SUM(amount) AS total_sales FROM payment p
LEFT JOIN customer c ON
p.customer_id = c.customer_id
LEFT JOIN address a ON
a.address_id = c.address_id
LEFT JOIN city ON
city.city_id=a.city_id
GROUP BY city
ORDER BY total_sales DESC

8. Task: Create an overview of the revenue (sum of amount) grouped by a column in the format "country, city".
Question: Which country, city has the least sales?

A:
SELECT country ||', '|| city AS location, SUM(amount) AS total_sales
FROM city ci
LEFT JOIN country co ON
ci.country_id=co.country_id
LEFT JOIN address ad ON
ad.city_id = ci.city_id
LEFT JOIN customer cu ON
cu.address_id = ad.address_id
LEFT JOIN payment p ON
p.customer_id=cu.customer_id
GROUP BY location
ORDER BY total_sales

9. Task: Create a list with the average-sales-per-customer of each staff.
Question: Which staff_id makes on average more revenue per customer?

A:
SELECT staff_id, ROUND(AVG(sales_per_customer),2) AS avg_sales_per_customer FROM
(SELECT staff_id, customer_id, SUM(amount) AS sales_per_customer
FROM payment
GROUP BY staff_id, customer_id) AS staff_sales
GROUP BY staff_id
ORDER BY avg_sales_per_customer DESC

10. Task: Create a query that shows the average daily revenue of all Sundays.
Question: What is the daily average revenue of all Sundays?

A:
SELECT
ROUND(AVG(daily_sum),2) AS avg_amount
FROM (SELECT
DATE(payment_date) AS business_date,
SUM(amount) AS daily_sum
FROM payment
GROUP BY business_date) AS daily_sum
WHERE EXTRACT(dow FROM business_date) = 0
GROUP BY EXTRACT(dow FROM business_date)


11. Task: Create a list of movies - with their length and their replacement cost -
that are longer than the average length in each replacement cost group.
Question: Which two movies are the shortest on that list and how long are they?

A:
SELECT title, length, replacement_cost FROM film f1
WHERE length > (SELECT ROUND(AVG(length),2) AS avg_length
				        FROM film f2
				        WHERE f1.replacement_cost=f2.replacement_cost
			        	GROUP BY replacement_cost)
ORDER BY length

12. Task: Create a list that shows the "average customer lifetime value" grouped by the different districts.
Example:
If there are two customers in "District 1" where one customer has a total (lifetime)
spent of $1000 and the second customer has a total spent of $2000 then the "average customer lifetime spent"
in this district is $1500.
So, first, you need to calculate the total per customer and then the average of these totals per district.

Question: Which district has the highest average customer lifetime value?

A:
SELECT district, ROUND(AVG(lifetime_spent),2) AS avg_spent_district FROM
(SELECT p.customer_id,
SUM(amount) AS lifetime_spent,
district
FROM payment p
INNER JOIN customer c
ON p.customer_id=c.customer_id
INNER JOIN address a
ON c.address_id=a.address_id
GROUP BY p.customer_id, district) AS sum_spent_district
GROUP BY district
ORDER BY avg_spent_district DESC


13. Task: Create a list that shows all payments including the payment_id, amount, and the film category (name)
plus the total amount that was made in this category.
Order the results ascendingly by the category (name) and as second order criterion by the payment_id ascendingly.

Question: What is the total revenue of the category 'Action' and what is the lowest payment_id in that category 'Action'?

A:
SELECT payment_id, name AS category, amount,
(SELECT SUM(amount) AS category_income
FROM payment pa2
LEFT JOIN rental re2 ON
pa2.rental_id=re2.rental_id
LEFT JOIN inventory inv2 ON
inv2.inventory_id=re2.inventory_id
LEFT JOIN film_category fc2 ON
fc2.film_id = inv2.film_id
LEFT JOIN category ca2 ON
ca2.category_id=fc2.category_id
WHERE ca2.name=ca.name
GROUP BY name)
FROM payment pa
LEFT JOIN rental re ON
pa.rental_id=re.rental_id
LEFT JOIN inventory inv ON
inv.inventory_id=re.inventory_id
LEFT JOIN film_category fc ON
fc.film_id = inv.film_id
LEFT JOIN category ca ON
ca.category_id=fc.category_id
ORDER BY category, payment_id


14. Task: Create a list with the top overall revenue of a film title (sum of amount per title) for each category (name).
Question: Which is the top-performing film in the animation category?

A:
SELECT category, title, MAX(total_amount) AS best_sellers
FROM
--
(SELECT name AS category, title, SUM(amount) AS total_amount
FROM payment pa
INNER JOIN rental re ON
pa.rental_id=re.rental_id
INNER JOIN inventory inv ON
inv.inventory_id=re.inventory_id
INNER JOIN film fi ON
fi.film_id = inv.film_id
INNER JOIN film_category fc ON
fc.film_id = inv.film_id
INNER JOIN category ca ON
ca.category_id=fc.category_id
GROUP BY category, title
ORDER BY total_amount DESC) table_total_amount1
--
GROUP BY category, title
--
HAVING MAX(total_amount) = (SELECT MAX(total_amount) FROM
(
(SELECT name AS category, title, SUM(amount) AS total_amount
FROM payment pa
INNER JOIN rental re ON
pa.rental_id=re.rental_id
INNER JOIN inventory inv ON
inv.inventory_id=re.inventory_id
INNER JOIN film fi ON
fi.film_id = inv.film_id
INNER JOIN film_category fc ON
fc.film_id = inv.film_id
INNER JOIN category ca ON
ca.category_id=fc.category_id
GROUP BY category, title
ORDER BY total_amount DESC)	
) AS table_total_amount2
WHERE table_total_amount1.category=table_total_amount2.category
GROUP BY category)
--
ORDER BY best_sellers DESC







